# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings


# Manually added relative import to fix worker_pb2 cannot find issue
from . import worker_pb2 as worker__pb2

GRPC_GENERATED_VERSION = '1.72.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in worker_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TrainWorkerStub(object):
    """Training service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TrainStep = channel.unary_unary(
                '/tunix.rl.distributed_learning.TrainWorker/TrainStep',
                request_serializer=worker__pb2.TrainRequest.SerializeToString,
                response_deserializer=worker__pb2.TrainResponse.FromString,
                _registered_method=True)
        self.GetPerTokenLogps = channel.unary_unary(
                '/tunix.rl.distributed_learning.TrainWorker/GetPerTokenLogps',
                request_serializer=worker__pb2.GetPerTokenLogpsRequest.SerializeToString,
                response_deserializer=worker__pb2.GetPerTokenLogpsResponse.FromString,
                _registered_method=True)
        self.MaybeRestore = channel.unary_unary(
                '/tunix.rl.distributed_learning.TrainWorker/MaybeRestore',
                request_serializer=worker__pb2.MaybeRestoreRequest.SerializeToString,
                response_deserializer=worker__pb2.MaybeRestoreResponse.FromString,
                _registered_method=True)
        self.Eval = channel.unary_unary(
                '/tunix.rl.distributed_learning.TrainWorker/Eval',
                request_serializer=worker__pb2.EvalRequest.SerializeToString,
                response_deserializer=worker__pb2.EvalResponse.FromString,
                _registered_method=True)


class TrainWorkerServicer(object):
    """Training service
    """

    def TrainStep(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPerTokenLogps(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MaybeRestore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Eval(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TrainWorkerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TrainStep': grpc.unary_unary_rpc_method_handler(
                    servicer.TrainStep,
                    request_deserializer=worker__pb2.TrainRequest.FromString,
                    response_serializer=worker__pb2.TrainResponse.SerializeToString,
            ),
            'GetPerTokenLogps': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPerTokenLogps,
                    request_deserializer=worker__pb2.GetPerTokenLogpsRequest.FromString,
                    response_serializer=worker__pb2.GetPerTokenLogpsResponse.SerializeToString,
            ),
            'MaybeRestore': grpc.unary_unary_rpc_method_handler(
                    servicer.MaybeRestore,
                    request_deserializer=worker__pb2.MaybeRestoreRequest.FromString,
                    response_serializer=worker__pb2.MaybeRestoreResponse.SerializeToString,
            ),
            'Eval': grpc.unary_unary_rpc_method_handler(
                    servicer.Eval,
                    request_deserializer=worker__pb2.EvalRequest.FromString,
                    response_serializer=worker__pb2.EvalResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tunix.rl.distributed_learning.TrainWorker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tunix.rl.distributed_learning.TrainWorker', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TrainWorker(object):
    """Training service
    """

    @staticmethod
    def TrainStep(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tunix.rl.distributed_learning.TrainWorker/TrainStep',
            worker__pb2.TrainRequest.SerializeToString,
            worker__pb2.TrainResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPerTokenLogps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tunix.rl.distributed_learning.TrainWorker/GetPerTokenLogps',
            worker__pb2.GetPerTokenLogpsRequest.SerializeToString,
            worker__pb2.GetPerTokenLogpsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MaybeRestore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tunix.rl.distributed_learning.TrainWorker/MaybeRestore',
            worker__pb2.MaybeRestoreRequest.SerializeToString,
            worker__pb2.MaybeRestoreResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Eval(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tunix.rl.distributed_learning.TrainWorker/Eval',
            worker__pb2.EvalRequest.SerializeToString,
            worker__pb2.EvalResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class RolloutWorkerStub(object):
    """Sampling service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Generate = channel.unary_unary(
                '/tunix.rl.distributed_learning.RolloutWorker/Generate',
                request_serializer=worker__pb2.GenerateRequest.SerializeToString,
                response_deserializer=worker__pb2.GenerateResponse.FromString,
                _registered_method=True)


class RolloutWorkerServicer(object):
    """Sampling service
    """

    def Generate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RolloutWorkerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Generate': grpc.unary_unary_rpc_method_handler(
                    servicer.Generate,
                    request_deserializer=worker__pb2.GenerateRequest.FromString,
                    response_serializer=worker__pb2.GenerateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tunix.rl.distributed_learning.RolloutWorker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tunix.rl.distributed_learning.RolloutWorker', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RolloutWorker(object):
    """Sampling service
    """

    @staticmethod
    def Generate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tunix.rl.distributed_learning.RolloutWorker/Generate',
            worker__pb2.GenerateRequest.SerializeToString,
            worker__pb2.GenerateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
